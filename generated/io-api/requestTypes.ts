// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// tslint:disable:max-union-size
// tslint:disable:no-identical-functions

import * as t from "io-ts";

import * as r from "italia-ts-commons/lib/requests";

import { ServicePublic } from "./ServicePublic";

import { PaginatedServiceTupleCollection } from "./PaginatedServiceTupleCollection";

import { MessageResponseWithContent } from "./MessageResponseWithContent";

import { ProblemJson } from "./ProblemJson";

import { PaginatedCreatedMessageWithoutContentCollection } from "./PaginatedCreatedMessageWithoutContentCollection";

import { NewMessage } from "./NewMessage";

import { Profile } from "./Profile";

import { ExtendedProfile } from "./ExtendedProfile";

/****************************************************************
 * getService
 */

// Request type definition
export type GetServiceT = r.IGetApiRequestType<
  { readonly service_id: string; readonly SubscriptionKey: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, ServicePublic>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
>;

// Decodes the success response with a custom success type
export function getServiceDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
        200,
        type
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.constantResponseDecoder<undefined, 404>(404, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getServiceDefaultDecoder = () => getServiceDecoder(ServicePublic);

/****************************************************************
 * getServicesByRecipient
 */

// Request type definition
export type GetServicesByRecipientT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string; readonly recipient: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, PaginatedServiceTupleCollection>
  | r.IResponseType<401, undefined>
>;

// Decodes the success response with a custom success type
export function getServicesByRecipientDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
      200,
      type
    ),
    r.constantResponseDecoder<undefined, 401>(401, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getServicesByRecipientDefaultDecoder = () =>
  getServicesByRecipientDecoder(PaginatedServiceTupleCollection);

/****************************************************************
 * getVisibleServices
 */

// Request type definition
export type GetVisibleServicesT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, PaginatedServiceTupleCollection>
  | r.IResponseType<401, undefined>
>;

// Decodes the success response with a custom success type
export function getVisibleServicesDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
      200,
      type
    ),
    r.constantResponseDecoder<undefined, 401>(401, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getVisibleServicesDefaultDecoder = () =>
  getVisibleServicesDecoder(PaginatedServiceTupleCollection);

/****************************************************************
 * getMessage
 */

// Request type definition
export type GetMessageT = r.IGetApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly id: string;
  },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, MessageResponseWithContent>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
>;

// Decodes the success response with a custom success type
export function getMessageDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
        200,
        type
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.ioResponseDecoder<
      404,
      (typeof ProblemJson)["_A"],
      (typeof ProblemJson)["_O"]
    >(404, ProblemJson)
  );
}

// Decodes the success response with the type defined in the specs
export const getMessageDefaultDecoder = () =>
  getMessageDecoder(MessageResponseWithContent);

/****************************************************************
 * getMessagesByUser
 */

// Request type definition
export type GetMessagesByUserT = r.IGetApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly paginationRequest?: string;
  },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, PaginatedCreatedMessageWithoutContentCollection>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
>;

// Decodes the success response with a custom success type
export function getMessagesByUserDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
        200,
        type
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.ioResponseDecoder<
      404,
      (typeof ProblemJson)["_A"],
      (typeof ProblemJson)["_O"]
    >(404, ProblemJson)
  );
}

// Decodes the success response with the type defined in the specs
export const getMessagesByUserDefaultDecoder = () =>
  getMessagesByUserDecoder(PaginatedCreatedMessageWithoutContentCollection);

/****************************************************************
 * submitMessageforUser
 */

// Request type definition
export type SubmitMessageforUserT = r.IPostApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly newMessage?: NewMessage;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<201, undefined>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<500, ProblemJson>
>;

// Decodes the success response with a custom success type
export function submitMessageforUserDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.ioResponseDecoder<201, (typeof type)["_A"], (typeof type)["_O"]>(
          201,
          type
        ),
        r.ioResponseDecoder<
          400,
          (typeof ProblemJson)["_A"],
          (typeof ProblemJson)["_O"]
        >(400, ProblemJson)
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.ioResponseDecoder<
      500,
      (typeof ProblemJson)["_A"],
      (typeof ProblemJson)["_O"]
    >(500, ProblemJson)
  );
}

// Decodes the success response with the type defined in the specs
export const submitMessageforUserDefaultDecoder = () =>
  submitMessageforUserDecoder(t.undefined);

/****************************************************************
 * getProfile
 */

// Request type definition
export type GetProfileT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string; readonly fiscalCode: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, Profile>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, ProblemJson>
>;

// Decodes the success response with a custom success type
export function getProfileDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
        200,
        type
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.ioResponseDecoder<
      404,
      (typeof ProblemJson)["_A"],
      (typeof ProblemJson)["_O"]
    >(404, ProblemJson)
  );
}

// Decodes the success response with the type defined in the specs
export const getProfileDefaultDecoder = () => getProfileDecoder(Profile);

/****************************************************************
 * upsertProfile
 */

// Request type definition
export type UpsertProfileT = r.IPostApiRequestType<
  {
    readonly SubscriptionKey: string;
    readonly fiscalCode: string;
    readonly extendedProfile?: ExtendedProfile;
  },
  "Content-Type" | "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, undefined>
  | r.IResponseType<400, ProblemJson>
  | r.IResponseType<401, undefined>
  | r.IResponseType<404, undefined>
  | r.IResponseType<500, ProblemJson>
>;

// Decodes the success response with a custom success type
export function upsertProfileDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
            200,
            type
          ),
          r.ioResponseDecoder<
            400,
            (typeof ProblemJson)["_A"],
            (typeof ProblemJson)["_O"]
          >(400, ProblemJson)
        ),
        r.constantResponseDecoder<undefined, 401>(401, undefined)
      ),
      r.constantResponseDecoder<undefined, 404>(404, undefined)
    ),
    r.ioResponseDecoder<
      500,
      (typeof ProblemJson)["_A"],
      (typeof ProblemJson)["_O"]
    >(500, ProblemJson)
  );
}

// Decodes the success response with the type defined in the specs
export const upsertProfileDefaultDecoder = () =>
  upsertProfileDecoder(t.undefined);

/****************************************************************
 * getInfo
 */

// Request type definition
export type GetInfoT = r.IGetApiRequestType<
  { readonly SubscriptionKey: string },
  "Ocp-Apim-Subscription-Key",
  never,
  r.IResponseType<200, undefined> | r.IResponseType<401, undefined>
>;

// Decodes the success response with a custom success type
export function getInfoDecoder<A, O>(type: t.Type<A, O>) {
  return r.composeResponseDecoders(
    r.ioResponseDecoder<200, (typeof type)["_A"], (typeof type)["_O"]>(
      200,
      type
    ),
    r.constantResponseDecoder<undefined, 401>(401, undefined)
  );
}

// Decodes the success response with the type defined in the specs
export const getInfoDefaultDecoder = () => getInfoDecoder(t.undefined);
